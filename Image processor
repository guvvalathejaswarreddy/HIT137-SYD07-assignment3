import tkinter as tk
from tkinter import filedialog, messagebox
import cv2
from PIL import Image, ImageTk
import numpy as np

class ImageProcessorApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Image Processor")

        # Button to load an image
        self.load_button = tk.Button(root, text="Load Image", command=self.load_image)
        self.load_button.pack()

        # Canvas for displaying the image
        self.canvas = tk.Canvas(root, cursor="cross")  
        self.canvas.pack(fill=tk.BOTH, expand=True)

        # Slider to control blur intensity
        self.slider = tk.Scale(root, from_=1, to=100, orient=tk.HORIZONTAL,
                               label="Blur Intensity", command=self.update_blur)
        self.slider.pack()

        # Button to save the processed image
        self.save_button = tk.Button(root, text="Save Image", command=self.save_image)
        self.save_button.pack()

        # Variables to store image data
        self.original_image = None  # Original image loaded
        self.cropped_image = None  # Cropped image before processing
        self.tk_image = None  # Tkinter-compatible image for display
        self.start_x = self.start_y = self.end_x = self.end_y = None  # Selection coordinates
        self.rect_id = None  # Rectangle selection ID
        self.processed_image = None  # Processed (blurred) image
# Bind mouse events for cropping functionality
        self.canvas.bind("<ButtonPress-1>", self.on_mouse_press)
        self.canvas.bind("<B1-Motion>", self.on_mouse_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_mouse_release)

    def load_image(self):
        """Loads an image from the file system and displays it."""
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", ".jpg;.png;*.bmp")])
        if not file_path:
            return

        self.original_image = cv2.imread(file_path)  # Load image using OpenCV
        self.processed_image = self.original_image.copy()  # Keep a copy for processing
        self.display_image()

    def display_image(self, img=None):
        """Displays the image on the canvas."""
        if img is None:
            img = self.processed_image

        if img is None:
            return

        # Convert OpenCV image (BGR) to Tkinter-compatible format (RGB)
        image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(image)
        image.thumbnail((400, 400))  # Resize image for display
        self.tk_image = ImageTk.PhotoImage(image)
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)

    def on_mouse_press(self, event):
        """Records the starting point of the cropping selection."""
        self.start_x, self.start_y = event.x, event.y
        self.rect_id = self.canvas.create_rectangle(self.start_x, self.start_y,
                                                    self.start_x, self.start_y,
                                                    outline="red")

    def on_mouse_drag(self, event):
        """Updates the selection rectangle dynamically as the user drags the mouse."""
        self.end_x, self.end_y = event.x, event.y
        self.canvas.coords(self.rect_id, self.start_x, self.start_y, self.end_x, self.end_y)

    def on_mouse_release(self, event):
        """Crops the selected area from the image."""
        if self.original_image is None:
            return

        # Ensure correct coordinates
        x1, x2 = sorted([self.start_x, self.end_x])
        y1, y2 = sorted([self.start_y, self.end_y])

        # Get canvas and image dimensions for coordinate conversion
        canvas_width, canvas_height = self.canvas.winfo_width(), self.canvas.winfo_height()
        img_height, img_width = self.original_image.shape[:2]

        scale_x = img_width / canvas_width
        scale_y = img_height / canvas_height
# Convert to actual image coordinates
        x1, x2 = int(x1 * scale_x), int(x2 * scale_x)
        y1, y2 = int(y1 * scale_y), int(y2 * scale_y)

        # Crop the selected region
        self.cropped_image = self.original_image[y1:y2, x1:x2]
        self.processed_image = self.cropped_image.copy()
        self.display_image(self.processed_image)

    def update_blur(self, value):
        """Applies blur effect to the cropped image."""
        if self.cropped_image is None:
            return

        blur_value = int(value)
        if blur_value % 2 == 0:  # Gaussian blur requires odd kernel size
            blur_value += 1

        # Apply Gaussian blur
        blurred_image = cv2.GaussianBlur(self.cropped_image, (blur_value, blur_value), 0)
        self.processed_image = blurred_image
        self.display_image(self.processed_image)

    def save_image(self):
        """Saves the processed image to the file system."""
        if self.processed_image is None:
            messagebox.showerror("Error", "No image to save!")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".png",
                                                 filetypes=[("PNG Files", "*.png"),
                                                            ("JPEG Files", "*.jpg"),
                                                            ("Bitmap Files", "*.bmp")])
        if file_path:
            cv2.imwrite(file_path, self.processed_image)  # Save using OpenCV
            messagebox.showinfo("Saved", "Image saved successfully!")

if name == "main":
    root = tk.Tk()
    app = ImageProcessorApp(root)
    root.mainloop()
